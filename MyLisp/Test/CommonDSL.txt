
(list
	(setg +) 
	(setref + `Add)
	(setg <) 
	(setref < `LessThan)
	(DebugLisp () (求值错误) (求值成功))
	(RefLisp "..\Test\dolist.txt")
	
	 ;;;;运行期真正调用表达式(MakeCall)
	 (list
	 		(setg MakeCall)
	 		(setref MakeCall 
	 					``(StackCode (
	 								(sets 函数名)
	           	    (setref 函数名 `(car (cdr StackRefLisp)))
	                (sets 参数列表)
	                (setref 参数列表 `(car (cdr (cdr StackRefLisp))))
	                ;;;;生成函数调用代码
        				  (sets 函数调用代码)
        				  (setref 函数调用代码 `(list 函数名 参数列表))
        				  (return 函数调用代码)
	 		))))
	;;;;(defun 函数名 (形参1 (& 形参3) 形参) (代码列表))
	(list
	 	  (setg defun1)
		 	(setq defun1 
		 	      `(StackCode (list
	               (sets 函数名)
	           	   (setref 函数名 `(car (cdr StackRefLisp)))
	           	   (setg 函数名)
	           	   (sets 形参列表)
	               (setref 形参列表 `(car (cdr (cdr StackRefLisp))))
	               ;;;;根据形参列表生成参数绑定代码形如 (list (setq x (car (cdr StackRefLisp)) (setref y (car (cdr (cdr StackRefLisp)))))
	               (setref 参数初始化绑定 (cons `list (dolist 形参列表 参数绑定代码生成)))
	               (sets 代码列表)
	               (setref 代码列表 `(car (cdr (cdr (cdr StackRefLisp)))))
	               ;;;;制作函数体
	           	   (setq 函数名 
	           	   				`(StackCode_Part (list
	           	   								(sets 内部函数名)
								                (sets 参数列表)
								                (setref 参数列表 `(cdr StackRefLisp))
								                
								                ;;;;生成函数体代码(list 参数绑定代码列表 代码列表)
								                (sets 函数体)
								                (setq 函数体 `(StackCode ;(list `list `参数初始化绑定 `代码列表)))
							        				  (sets 函数调用代码)
							        				  (setref 函数调用 (list `函数体 参数列表))
							        				  (return 函数调用))))
							    ))))

	 (list 
	 		(setg 参数绑定代码生成)
	 		(setq 参数绑定代码生成
	 						`(StackCode (list
	 									(sets 形参)
	 									(setref 形参 `(StackRefLisp 1))
	 									(cond ((atom 形参) 
	 													(return `( (sets ;形参) 
	 																		(setq ;形参 (StackRefLispGetVal n)) 
	 																		(setq n (+ n 1))
	 																			)))
	 												(t (list
	 																(sets 参数类型)
	 																(setq 参数类型 `(car 形参))
	 																(sets 参数名)
	 																(setref 参数名 `(car (cdr 形参)))
	 																(cond ((atom (eq 参数类型 &) ) 
	 																				(return 
	 																						`( (sets ;参数名) 
	 																							(setref ;参数名 (StackRefLisp n)) 
	 																							(setq n (+ n 1)))
	 																						 )))
	 															  )))))
	 		)
	 	)
	 				        				  
	 (list
	 	  (setg defun)
	 	  (setq defun
	 	  				 `(StackCode (list
		               (sets 函数名)
		           	   (setref 函数名 `(StackRefLispGetVal 1))
		           	   (setg 函数名)
		           	   (sets 形参列表)
		               (setref 形参列表 (StackRefLisp 2))
		               ;;;;根据形参列表生成参数绑定代码形如 (list (setq x (car (cdr StackRefLisp)) (setref y (car (cdr (cdr StackRefLisp)))))
		               
		               (setref 参数初始化绑定 `(dolist_f 形参列表 参数绑定代码生成))
		               (sets 代码列表)
		               (setref 代码列表 `(car (cdr (cdr (cdr StackRefLisp)))))
		               ;;;;(setref 代码列表 `(StackRefLisp 3))
		               ;;;;制作函数体
		               ;;;;生成函数体代码(list 参数绑定代码列表 代码列表)
	                 (sets 函数体)
	                 (setref 函数体 ``(StackCode ;(list `list `(sets n) `(setq n 1) @参数初始化绑定 代码列表)))
	                 ;;;;(setq szDebug 函数体)
	               	 ;;;;(DebugLisp (szDebug))
		               (sets MakeFunc)
		               (setq MakeFunc 
			           	   `(setq ;函数名  ';函数体))
									 (DebugLisp (MakeFunc))
									 MakeFunc
									 ;;;;(DebugLisp (函数名))
							   ))))
	 
)
