;;;;dolist 对列表中每一个对象调用一次方法
;;;;心海岛主
;;;;2004.4.21
(list
 	  (setg dolist)
	 	(setq dolist 
	 	      `(StackCode_Part 
	 	      		(list
	 	      			(setref 上层栈调用 StackRefLisp)
	 	      			;;;;(DebugLisp ((上层栈调用 2)))
                (sets ListObject)
           	    (setref ListObject `(car (cdr StackRefLisp)))
                (sets Func)
                (setref Func `(car (cdr (cdr StackRefLisp))))
                (cond 
                	((atom ListObject) (return nil))
                 	(t  (list (sets Par)
                    				 (setref Par `(car ListObject))
                    				 ;;;;调用函数
                    				 ;;;;(bp (ListObject) (求值后) t)
                    				 (sets FuncCall)
                    				 (setref FuncCall (list Func Par))
                             (sets OtherPar)
                             (setref OtherPar `(cdr ListObject))
                             ;;;;递归调用宏
                             (sets dolistCall)
                             (setref dolistCall `(dolist ;OtherPar ;Func))
                             ;;;;(bp (dolistCall) (求值后) t)
				 										 (return (cons FuncCall dolistCall)))))
	 	           )))
	 	           
	 	(REM 融合参数列表版,将结果列表中的元祖都融合在一个列表中)
	 	(setg dolist_f)
	 	(setq dolist_f
	 	      `(StackCode_Part 
	 	      		(list
	 	      			(setref 上层栈调用 StackRefLisp)
	 	      			;;;;(DebugLisp ((上层栈调用 2)))
                (sets ListObject)
           	    (setref ListObject `(car (cdr StackRefLisp)))
                (sets Func)
                (setref Func `(car (cdr (cdr StackRefLisp))))
                (cond 
                	((atom ListObject) (return nil))
                 	(t  (list (sets Par)
                    				 (setref Par `(car ListObject))
                    				 ;;;;调用函数
                    				 ;;;;(bp (ListObject) (求值后) t)
                    				 (sets FuncCall)
                    				 (setref FuncCall (list Func Par))
                             (sets OtherPar)
                             (setref OtherPar `(cdr ListObject))
                             ;;;;递归调用宏
                             (sets dolistCall)
                             (setref dolistCall `(dolist ;OtherPar ;Func))
                             ;;;;(bp (dolistCall) (求值后) t)
				 										 (return (cons @FuncCall @dolistCall)))))
	 	           )))
)